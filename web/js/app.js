(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.app = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0

/*

  Tyler Anderson 2011-2015
 */

(function() {
  var BinaryHeap;

  BinaryHeap = (function() {
    function BinaryHeap(score_func) {
      this.heap = [];
      this.scoreFunction = score_func;
    }

    BinaryHeap.prototype.push = function(element) {
      this.heap.push(element);
      this.sinkDown(this.heap.length - 1);
      return true;
    };

    BinaryHeap.prototype.pop = function() {
      var end, result;
      result = this.heap[0];
      end = this.heap.pop();
      if (this.heap.length > 0) {
        this.heap[0] = end;
        this.bubbleUp(0);
      }
      return result;
    };

    BinaryHeap.prototype.remove = function(node) {
      var end, i;
      i = this.heap.indexOf(node);
      end = this.heap.pop();
      if (i !== this.heap.length - 1) {
        this.heap[i] = end;
        if (this.scoreFunction(end) < this.scoreFunction(node)) {
          this.sinkDown(i);
        } else {
          this.bubbleUp(i);
        }
      }
      return true;
    };

    BinaryHeap.prototype.size = function() {
      return this.heap.length;
    };

    BinaryHeap.prototype.rescoreElement = function(node) {
      return this.sinkDown(this.heap.indexOf(node));
    };

    BinaryHeap.prototype.sinkDown = function(n) {
      var element, parent, parentN;
      element = this.heap[n];
      while (n > 0) {
        parentN = ((n + 1) >> 1) - 1;
        parent = this.heap[parentN];
        if (this.scoreFunction(element) < this.scoreFunction(parent)) {
          this.heap[parentN] = element;
          this.heap[n] = parent;
          n = parentN;
          true;
        } else {
          break;
        }
      }
      return true;
    };

    BinaryHeap.prototype.bubbleUp = function(n) {
      var child1, child1N, child1Score, child2, child2N, child2Score, elemScore, element, length, swap;
      length = this.heap.length;
      element = this.heap[n];
      elemScore = this.scoreFunction(element);
      while (true) {
        child2N = (n + 1) << 1;
        child1N = child2N - 1;
        swap = null;
        if (child1N < length) {
          child1 = this.heap[child1N];
          child1Score = this.scoreFunction(child1);
          if (child1Score < elemScore) {
            swap = child1N;
          }
        }
        if (child2N < length) {
          child2 = this.heap[child2N];
          child2Score = this.scoreFunction(child2);
          if (child2Score < (swap === null ? elemScore : child1Score)) {
            swap = child2N;
          }
        }
        if (swap !== null) {
          this.heap[n] = this.heap[swap];
          this.heap[swap] = element;
          n = swap;
          true;
        } else {
          break;
        }
      }
      return true;
    };

    return BinaryHeap;

  })();

  module.exports = function(score_function) {
    return new BinaryHeap(score_function);
  };

}).call(this);

},{}],2:[function(require,module,exports){
'use strict';

//From https://en.wikipedia.org/wiki/List_of_ancient_Romans

var names = ['Titus Acciu', 'Gaius Aciliu', 'Claudia Act', 'Claudius Aelianu', 'Sextus Aeliu', 'Paetus Catu', 'Lucius Aeliu', 'Aemilia Scaur', 'Marcus Aemiliu', 'Flavius Aetiu', 'Gnaeus Domitiu', 'Lucius Afraniu', 'Julius Africanu', 'Sextus Caeciliu', 'Claudius Agathinu', 'Gnaeus Juliu', 'Sextus Calpurniu', 'Marcus Juliu', 'Marcus Agripp', 'Marcus Postumu', 'Vipsania Agrippin', 'Agrippina Majo', 'Agrippina Mino', 'Gaius Serviliu', 'Ahenobarbus', 'Aius Locutiu', 'Albinovanus Ped', 'Titus Albuciu', 'Gaius Silu', 'Alfenus Varu', 'Alfius Avitu', 'Allectus', 'Gaius Amafiniu', 'Lucius Ambiviu', 'Amelius Gentilianu', 'Ammianus Marcellinu', 'Lucius Ampeliu', 'Gaius Antistiu', 'Lucius Antistiu', 'Antonia', 'Antoninus Piu', 'Arrius Antoninu', 'Antoninus Liberali', 'Gaius Antoniu', 'Iullus Antoniu', 'Lucius Antoniu', 'Marcus Antoniu', 'Marcus Orato', 'Marcus Creticu', 'Mark Anton', 'Marcus Antyllu', 'Antonius Casto', 'Antonius Mus', 'Antonius Diogene', 'Marcus Ape', 'Aelius Festu', 'Apicius', 'Lucius Aproniu', 'Pontius Aquil', 'Romanus Aquil', 'Manius Aquilliu', 'Gaius Gallu', 'Flavius Arcadiu', 'Aulus Archia', 'Arellius Fuscu', 'Arria Majo', 'Arria Mino', 'Flavius Arrianu', 'Lucius Arruntiu', 'Lucius Arruntius', 'Arruntius Celsu', 'Lucius Artoriu', 'Quintus Juniu', 'Arusianus Messiu', 'Quintus Asconiu', 'Sempronius Aselli', 'Aemilius Aspe', 'Nonius Asprena', 'Lucius Philologu', 'Atia', 'Aulus Atiliu', 'Aulus Atiliu', 'Marcus Atiliu', 'Atilius Fortunatianu', 'Titus Quinctiu', 'Publius Aciliu', 'Caecilia Attic', 'Titus Pomponiu', 'Julius Atticu', 'Aufidius Bassu', 'Gnaeus Aufidiu', 'Sentius Augurinu', 'Augustus', 'Aurelia', 'Lucius Domitiu', 'Marcus Aureliu', 'Marcus Antoninu', 'Sextus Victo', 'Aureolus', 'Decimus Magnu', 'Publius Paetu', 'Titus Avidiu', 'Gaius Avidiu', 'Gaius Cassiu', 'Avienus', 'Gnaeus Baebiu', 'Marcus Baebiu', 'Quintus Baebius', 'Tiberius Claudius', 'Decius Caelius', 'Marcus Atius', 'Titus Ampius', 'Lucius Cornelius', 'Balbus', 'Balista', 'Quintus Marcius', 'Quintus Caecilius', 'Caesius Bassu', 'Saleius Bassu', 'Bavius', 'Belisarius', 'Lucius Calpurnius', 'Marcus Furius', 'Marcus Calpurnius', 'Quintus Junius', 'Gaius Blossiu', 'Anicius Manlius', 'Vettius Bolanu', 'Bonifacius', 'Bonosus', 'Tiberius Claudius', 'Bruttidius Nige', 'Lucius Junius', 'Decimus Junius', 'Decimus Junius', 'Lucius Junius', 'Brutus', 'Sextus Afranius', 'Caecilius of', 'Gaius Caecilius', 'Caecilus Statiu', 'Quintus Caecilius', 'Lucius Caecilius', 'Aulus Caecin', 'Aulus Caecina', 'Aulus Caecina', 'Marcus Caelius', 'Quintus Servilius', 'Fannius Caepi', 'Gaius Julius', 'Gaius Julius', 'Lucius Julius', 'Sextus Julius', 'Gaius Caesa', 'Lucius Caesa', 'Marcus Calidiu', 'Gaius Julius', 'Calpurnia', 'Titus Calpurnius', 'Calpurnius Flaccu', 'Gaius Sextius', 'Gnaeus Domitius', 'Gnaeus Domitius', 'Gaius Calvisius', 'Gaius Licinius', 'Marcus Furius', 'Lucius Furius', 'Publius Canidius', 'Gaius Caninius', 'Caninius Rufu', 'Canius Rufu', 'Gaius Canuleiu', 'Flavius Cape', 'Gaius Ateius', 'Marcus Aurelius', 'Gaius Papirius', 'Gnaeus Papirius', 'Gaius Papirius', 'Marcus Aurelius', 'Gaius Carrinu', 'Marcus Aurelius', 'Spurius Carvilius', 'Spurius Carvilius', 'Servilius Casc', 'Cassiodorus', 'Spurius Cassius', 'Lucius Cassius', 'Lucius Cassius', 'Quintus Cassius', 'Gaius Cassius', 'Lucius Cassius', 'Cassius Parmensi', 'Cassius Severu', 'Cassius Chaere', 'Lucius Sergius', 'Titus Catiu', 'Cato', 'Gaius Porcius', 'Lucius Porcius', 'Catullus', 'Gaius Lutatius', 'Quintus Lutatius', 'Celsus Albinovanu', 'Aulus Cornelius', 'Publius Juventius', 'Censorinus', 'Quintus Petellius', 'Gaius Cestius', 'Gaius Cestius', 'Lucius Cestius', 'Publius Cornelius', 'Flavius Sosipater', 'Lucius Cornelius', 'Marcus Tullius', 'Quintus Tullius', 'Lucius Fabius', 'Lucius Quinctius', 'Lucius Cincius', 'Lucius Cornelius', 'Gaius Helvius', 'Gnaeus Cornelius', 'Gaius Julius', 'Gaius Julius', 'Julius Classicu', 'Claudius Claudianu', 'Claudius', 'Claudia Procul', 'Claudius II', 'Appius Claudiu', 'Appius Claudius', 'Appius Claudius', 'Publius Claudius', 'Quintus Claudiu', 'Gaius Claudius', 'Appius Claudius', 'Marcus Claudius', 'Quintus Claudius', 'Tiberius Claudiu', 'Claudius Etruscu', 'Tiberius Claudius', 'Claudius Mamertinu', 'Titus Flavius', 'Clodia', 'Clodius Aesopu', 'Publius Clodius', 'Lucius Clodius', 'Publius Clodius', 'Decimus Clodius', 'Cloelia', 'Aulus Cluentius', 'Lucius Coelius', 'Gaius Coelius', 'Lucius Junius', 'Cominianus', 'Commodianus', 'Lucius Aelius', 'Constans', 'Flavius Valerius', 'Constantine I', 'Flavius Claudius', 'Flavius Valerius', 'Constantius I', 'Constantius II', 'Gnaeus Marcius', 'Cornelia African', 'Cornelia', 'Cornelia Metell', 'Gaius Corneliu', 'Cornelius Severu', 'Lucius Cornificiu', 'Quintus Cornificiu', 'Lucius Annaeus', 'Gaius Julius', 'Gaius Coruncaniu', 'Lucius Coruncaniu', 'Tiberius Coruncaniu', 'Titus Statilius', 'Quintus Conconiu', 'Aulus Cornelius', 'Gaius Aurelius', 'Lucius Aurelius', 'Marcus Aurelius', 'Marcus Julius', 'Gaius Calpurnius', 'Publius Licinius', 'Lucius Licinius', 'Marcus Licinius', 'Publius Licinius', 'Aulus Cremutius', 'Quintus Terentius', 'Curiatius Maternu', 'Marcus Curtiu', 'Curtius Montanu', 'Thascius Caecilius', 'Damophilus', 'Lucius Decidius', 'Gaius Messius', 'Publius Decius', 'Publius Decius', 'Quintus Delliu', 'Sempronius Densu', 'Lucius Siccius', 'Manius Curius', 'Publius Herennius', 'Lucius Pollentius', 'Titus Didiu', 'Marcus Didius', 'Dio Cassiu', 'Gaius Aurelius', 'Dioscorides Pedaniu', 'Gnaeus Cornelius', 'Publius Cornelius', 'Titus Flavius', 'Flavia Domitill', 'Gnaeus Domitius', 'Lucius Domitius', 'Domitius Marsu', 'Aelius Donatu', 'Tiberius Claudius', 'Dorotheus', 'Blossius Aemilius', 'Julia Drusill', 'Julius Caesar', 'Nero Claudius', 'Marcus Livius', 'Marcus Livius', 'Gaius Duiliu', 'Marcus Egnatius', 'Elagabalus', 'Sextilius En', 'Severus Sanctus', 'Quintus Enniu', 'Magnus Felix', 'Titus Clodius', 'Erotian', 'Sextus Erucius', 'Flavius Eugeniu', 'Eumenius', 'Eusebius of', 'Eutropius', 'Iulius Exsuperantiu', 'Fabianus Papiriu', 'Marcus Fabius', 'Quintus Fabius', 'Marcus Fabius', 'Lucius Fabius', 'Paullus Fabius', 'Quintus Fabius', 'Quintus Fabius', 'Quintus Fabius', 'Quintus Fabius', 'Quintus Fabius', 'Fabius Rusticu', 'Gaius Fabricius', 'Marcus Fadius', 'Gaius Fanniu', 'Annia Galeria', 'Marcus Cetius', 'Eulogius Favoniu', 'Marcus Favoniu', 'Favorinus', 'Marcus Antonius', 'Fenestella', 'Porcius Festu', 'Rufius Festu', 'Sextus Pompeius', 'Gaius Flavius', 'Julius Firmicus', 'Aulus Avilius', 'Quintus Fulvius', 'Lucius Valerius', 'Marcus Fulvius', 'Verrius Flaccu', 'Lucius Quinctius', 'Titus Quinctius', 'Gaius Flaminiu', 'Gnaeus Flaviu', 'Flavius Feli', 'Titus Flavius', 'Marcus Annius', 'Florus', 'Marcus Fonteiu', 'Sextus Julius', 'Marcus Cornelius', 'Quintus Fufius', 'Fabius Planciades', 'Fulvia', 'Gaius Fundaniu', 'Minicius Fundanu', 'Aulus Furius', 'Lucius Furius', 'Cornelius Fuscu', 'Aulus Gabiniu', 'Gaius Julius', 'Gaius', 'Gaius Sulpicius', 'Servius Sulpicius', 'Publius Sulpicius', 'Gaius Galerius', 'Galerius Trachalu', 'Publius Licinius', 'Lucius Iunius', 'Aelius Gallu', 'Appius Annius', 'Gaius Asinius', 'Gaius Cornelius', 'Aulus Didius', 'Gaius Lucretius', 'Gaius Sulpicius', 'Gallus Caesa', 'Quintus Gargilius', 'Gavius Bassu', 'Gavius Sil', 'Aulus Gelliu', 'Gnaeus Gelliu', 'Lucius Gellius', 'Geminus', 'Lucius Genuciu', 'Germanicus', 'Gessius Floru', 'Hosidius Get', 'Gnaeus Hosidius', 'Publius Septimius', 'Manius Acilius', 'Gaius Servilius', 'Glitius Atilius', 'Marcus Antonius', 'Marcus Antonius', 'Gaius Sempronius', 'Tiberius Sempronius', 'Julius Graecinu', 'Granius Licinianu', 'Flavius Gratia', 'Grattius', 'Grillius', 'Publius Aelius', 'Quintus Hateriu', 'Helvidius Priscu', 'Herennius Etruscu', 'Herennius Modestinu', 'Herennius Seneci', 'Herodes Atticu', 'Aulus Hirtiu', 'Honorius', 'Horatius Cocle', 'Quintus Horatius', 'Quintus Hortensiu', 'Hostilian', 'Hostius', 'Hyginus', 'Gaius Julius', 'Lucius Iciliu', 'Irenaeus', 'Isidorus Hispalensi', 'Isigonus', 'Januarius Nepotianu', 'Javolenus Priscu', 'Jordanes', 'Flavius Jovia', 'Juba', 'Jugurtha', 'Julia', 'Julia', 'Juliae Caesare', 'Julia Flavi', 'Vipsania Juli', 'Julia Antoni', 'Julia the', 'Julia Domn', 'Julia Maes', 'Julia Soaemias', 'Julia Avita', 'Flavius Claudius', 'Julianus Salviu', 'Gaius Julius', 'Julius Caesa', 'Lucius Julius', 'Julius Canu', 'Julius Cereali', 'Sextus Julius', 'Julius Modestu', 'Julius Romanu', 'Julius Tir', 'Julius Valerius', 'Gaius Julius', 'Junius Congu', 'Marcus Junius', 'Junius Oth', 'Justin Marty', 'Justinian I', 'Marcus Justinianus', 'Decimus Iunius', 'Gaius Vettius', 'Marcus Juventius', 'Attius Labe', 'Cornelius Antistius', 'Marcus Antistius', 'Quintus Labienu', 'Titus Labienu', 'Lactantius', 'Lucius Furiu', 'Gaius Laeliu', 'Gaius Laelius', 'Laelius Archelau', 'Marcus Valerius', 'Laevius', 'Gaius Octavius', 'Larcius Licinu', 'Latinus', 'Marcus Tullius', 'Pompeius Lenaeu', 'Gnaeus Cornelius', 'Lucius Cornelius', 'Lucius Cornelius', 'Gnaeus Cornelius', 'Gnaeus Cornelius', 'Publius Cornelius', 'Publius Cornelius', 'Manius Aemilius', 'Marcus Aemilius', 'Libanius', 'Licentius', 'Valerius Licinianus', 'Licinius Imbre', 'Quintus Ligariu', 'Livia Drusill', 'Livilla', 'Lucius Livius', 'Titus Liviu', 'Lollia Paulin', 'Marcus Lolliu', 'Lollius Bassu', 'Marcus Lollius', 'Quintus Lollius', 'Marcus Annaeus', 'Lucius Lucceiu', 'Gaius Luciliu', 'Gaius Lucilius', 'Lucilla', 'Lucretia', 'Lucretius', 'Spurius Lucretius', 'Lucius Licinius', 'Marcus Terentius', 'Luscius Lanuvinu', 'Marcus Luriu', 'Quintus Lusius', 'Lygdamus', 'Gaius Licinius', 'Gaius Licinius', 'Aemilius Mace', 'Titus Fulvius', 'Marcus Opellius', 'Quintus Naevius', 'Macrobius Ambrosius', 'Gaius Maecena', 'Lucius Volusius', 'Spurius Maeliu', 'Gaius Maeniu', 'Maevius', 'Flavius Magnus', 'Magnus Maximu', 'Julius Majoria', 'Mallius Theodoru', 'Octavius Mamilius', 'Lucius Mamiliu', 'Gaius Mamilius', 'Mamurra', 'Gaius Hostilius', 'Gaius Maniliu', 'Manius Maniliu', 'Marcus Maniliu', 'Marcus Manliu', 'Gaius Claudius', 'Gaius Claudius', 'Marcus Claudius', 'Marcus Pomponius', 'Ulpius Marcellu', 'Marcia', 'Ulpia Marcian', 'Aelius Marcianu', 'Marcius', 'Ancus Marciu', 'Gaius Marcius', 'Marcus Aemilius', 'Gaius Mariu', 'Marcus Marius', 'Sextus Mariu', 'Marius Priscu', 'Marius Maximu', 'Marcus Valerius', 'Marullus', 'Salonina Matidi', 'Gaius Matiu', 'Gnaeus Matiu', 'Mavortius', 'Marcus Aurelius', 'Marcus Aurelius', 'Gaius Julius', 'Gaius Galerius', 'Sextus Quinctilius', 'Pomponius Mel', 'Lucius Annaeus', 'Aelius Melissu', 'Gaius Melissu', 'Gaius Memmiu', 'Agrippa Menenius', 'Flavius Merobaude', 'Lucius Cornelius', 'Manius Valerius', 'Marcus Valerius', 'Marcus Valerius', 'Marcus Valerius', 'Vipstanus Messal', 'Statilia Messalin', 'Valeria Messalin', 'Caecilia Metella', 'Caecilia Metell', 'Lucius Caecilius', 'Quintus Caecilius', 'Quintus Caecilius', 'Quintus Caecilius', 'Quintus Caecilius', 'Quintus Caecilius', 'Quintus Caecilius', 'Quintus Caecilius', 'Quintus Caecilius', 'Mettius Pompusianu', 'Titus Annius', 'Lucius Minucius', 'Marcus Minucius', 'Marcus Minucius', 'Gaius Minucius', 'Mucia Terti', 'Gaius Licinius', 'Lucius Mummius', 'Lucius Staius', 'Lucius Licinius', 'Musaeus Grammaticu', 'Gaius Musonius', 'Narses Genera', 'Gnaeus Naeviu', 'Rutilius Claudius', 'Narcissus', 'Marcus Aurelius', 'Cornelius Nepo', 'Lucius Neratius', 'Nero Claudius', 'Gaius Claudius', 'Tiberius Claudius', 'Nero Julius', 'Lucius Cocceius', 'Marcus Cocceius', 'Attus Naviu', 'Lucius Septimius', 'Virius Nicomachus', 'Publius Nigidius', 'Ninnius Crassu', 'Marcus Fulvius', 'Nonius Marcellu', 'Gaius Norbanu', 'Aulus Lappius', 'Quintus Noviu', 'Numa Pompiliu', 'Marcus Aurelius', 'Gaius Nymphidius', 'Iulius Obsequen', 'Octavia', 'Claudia Octavi', 'Gaius Octaviu', 'Gnaeus Octaviu', 'Marcus Octaviu', 'Septimius Odenathu', 'Quintus Lucretius', 'Quintus Ogulnius', 'Olympiodorus of', 'Olympiodorus the', 'Aurelius Opiliu', 'Lucius Opimiu', 'Gaius Oppiu', 'Publilius Optatianus', 'Lucius Orbilius', 'Paulus Orosiu', 'Publius Ostorius', 'Titus Otacilius', 'Marcus Salvius', 'Publius Ovidius', 'Ovinius', 'Marcus Pacuviu', 'Lucius Caesennius', 'Quintus Remmius', 'Palfurius Sur', 'Rutilius Taurus', 'Aulus Cornelius', 'Gaius Vibius', 'Aemilius Papinianu', 'Papirianus', 'Lucius Papirius', 'Gaius Papius', 'Passienus', 'Aemilius Lepidus', 'Lucius Aemilius', 'Lucius Aemilius', 'Julius Paulu', 'Paulus Alexandrinu', 'Quintus Pediu', 'Sextus Pediu', 'Marcus Perpern', 'Marcus Perperna', 'Aulus Persius', 'Publius Helvetius', 'Gaius Pescennius', 'Quintus Petilliu', 'Marcus Petreiu', 'Petronius', 'Publius Petroniu', 'Petronius Arbite', 'Publius Petronius', 'Julius Verus', 'Lucius Marcius', 'Quintus Marcius', 'Calpurnius Pis', 'Gaius Calpurnius', 'Gnaeus Calpurnius', 'Lucius Calpurnius', 'Lucius Calpurnius', 'Lucius Calpurnius', 'Lucius Calpurnius', 'Marcus Pupius', 'Galla Placidi', 'Placidus', 'Lactantius Placidu', 'Munatia Plancin', 'Gnaeus Planciu', 'Lucius Munatius', 'Titus Munatius', 'Pompeius Plant', 'Aulus Platorius', 'Plautia Urgulanill', 'Gaius Fulvius', 'Plautius', 'Aulus Plautiu', 'Publius Plautius', 'Plautius Lateranu', 'Marcus Plautius', 'Tiberius Plautius', 'Titus Maccius', 'Quintus Pleminiu', 'Gaius Plinius', 'Gaius Plinius', 'Pompeia Plotin', 'Plotinus', 'Plotius Tucc', 'Mestrius Plutarchu', 'Gaius Poetelius', 'Gaius Asinius', 'Julius Pollu', 'Polybius', 'Pompeius', 'Gnaeus Pompeiu', 'Quintus Pompeiu', 'Gnaeus Pompeius', 'Sextus Pompeius', 'Quintus Pompeius', 'Pompeius Saturninu', 'Pompeius Sil', 'Pompeius Strab', 'Pompilius', 'Lucius Pomponiu', 'Sextus Pomponiu', 'Marcus Pomponius', 'Titus Pomponius', 'Pomponius Rufu', 'Pomponius Secundu', 'Gavius Pontiu', 'Pontius Telesinu', 'Pontius Pilatu', 'Gaius Popillius', 'Publius Popillius', 'Poppaea Sabin', 'Quintus Poppaedius', 'Porcia', 'Porcius Licinu', 'Marcus Porcius', 'Pomponius Porphyrio', 'Porsenna', 'Aulus Postumius', 'Spurius Postumius', 'Lucius Postumius', 'Aulus Postumius', 'Marcus Cassianus', 'Potillius Cereali', 'Marcus Antonius', 'Priscianus', 'Priscus', 'Marcus Aurelius', 'Valerius Probu', 'Saint Procul', 'Proculus', 'Proculus', 'Sextus Propertiu', 'Aurelius Clemens', 'Quintus Publilius', 'Publilius Syru', 'Volero Publiliu', 'Publius Pupiu', 'Gaius Iulius', 'Asinius Quadratu', 'Titus Quinctius', 'Marcus Fabius', 'Quintus', 'Quintus Smyrnaeu', 'Publius Sulpicius', 'Quintus Marcius', 'Gaius Rabiriu', 'Gaius Rabirius', 'Lucius Aemilius', 'Marcus Aqilius', 'Marcus Atilius', 'Publius Memmius', 'Remus', 'Reposianus', 'Quintus Marcius', 'Flavius Ricime', 'Romulus', 'Romulus Augustulu', 'Sextus Rosciu', 'Lucius Roscius', 'Quintus Roscius', 'Rubellius Blandu', 'Gaius Rubellius', 'Gaius Rubellius', 'Rubellia Buss', 'Rufinus', 'Flavius Rufinu', 'Curtius Rufu', 'Quintus Curtius', 'Cluvius Rufu', 'Publius Servilius', 'Publius Rupiliu', 'Gaius Rutilius', 'Publius Rutilius', 'Publius Rutilius', 'Vibia Sabin', 'Sabinus', 'Titus Flavius', 'Titus Flavius', 'Masurius Sabinu', 'Marius Plotius', 'Julius Sacrovi', 'Saevius Nicano', 'Marcus Livius', 'Sallustius', 'Gaius Sallustius', 'Gaius Sallustius', 'Salvianus', 'Salvidienus Rufu', 'Lucius Antonius', 'Lucius Appuleius', 'Gaius Sentius', 'Gaius Mucius', 'Publius Mucius', 'Quintus Mucius', 'Cassius Scaevu', 'Lucius Cornelius', 'Publius Cornelius', 'Scipio Africanu', 'Publius Cornelius', 'Lucius Cornelius', 'Lucius Cornelius', 'Gnaeus Cornelius', 'Publius Cornelius', 'Publius Cornelius', 'Publius Cornelius', 'Publius Cornelius', 'Scribonia', 'Lucius Arruntius', 'Lucius Scribonius', 'Marcus Scribonius', 'Scribonius Largu', 'Gnaeus Tremellius', 'Julius Secundu', 'Sedulius', 'Sejanus', 'Lucius Seius', 'Lucius Annaeus', 'Publius Septimiu', 'Septimius Serenu', 'Serenus Sammonicu', 'Quintus Serenu', 'Sergius', 'Marcus Sergiu', 'Serranus', 'Quintus Sertoriu', 'Sulpicius Lupercus', 'Lucius Julius', 'Servilia', 'Publius Servilius', 'Publius Servilius', 'Marcus Servilius', 'Servius', 'Servius Tulliu', 'Publius Sestiu', 'Lucius Septimius', 'Marcus Aurelius', 'Sextus Julius', 'Flavius Valerius', 'Sulpicius Severu', 'Quintus Sextiu', 'Titus Sextiu', 'Sextus', 'Sextus Empiricu', 'Gnaeus Siciniu', 'Siculus Flaccu', 'Gaius Sollius', 'Decimus Junius', 'Gaius Junius', 'Gaius Appius', 'Marcus Junius', 'Decimus Junius', 'Lucius Junius', 'Marcus Junius', 'Gaius Siliu', 'Publius Silius', 'Silius Italicu', 'Lucius Cornelius', 'Publius Sittiu', 'Gaius Iulius', 'Gaius Sosiu', 'Quintus Sosius', 'Titus Vestricius', 'Staberius Ero', 'Titus Statilius', 'Publius Papinius', 'Stertinius', 'Flavius Stilich', 'Lucius Aelius', 'Gaius Licinius', 'Sueis', 'Gaius Suetonius', 'Gaius Suetonius', 'Publius Suillius', 'Lucius Cornelius', 'Publius Cornelius', 'Faustus Cornelius', 'Sulpicia', 'Servius Sulpiciu', 'Sulpicius Apollinari', 'Sulpicius Blith', 'Quintus Sulpicius', 'Publius Sulpicius', 'Servius Sulpicius', 'Lucius Licinius', 'Quintus Aurelius', 'Cornelius Tacitu', 'Marcus Claudius', 'Tanaquil', 'Tanusius Geminu', 'Lucius Tarius', 'Tarpeia', 'Lucius Tarquinius', 'Tarquinius Priscu', 'Tarquinius Superbu', 'Tarquitius Priscu', 'Titus Tatiu', 'Publius Terentius', 'Terentia', 'Terentianus Mauru', 'Quintus Terentius', 'Quintus Septimius', 'Gaius Pius', 'Theodosius I', 'Theodosius I', 'Publius Clodius', 'Tiberius Julius', 'Tiberius Julius', 'Tiberius Julius', 'Albius Tibullu', 'Gaius Oponius', 'Gaius Furius', 'Marcus Tullius', 'Julius Titianu', 'Titinius', 'Gnaeus Octavius', 'Gaius Titiu', 'Marcus Titiu', 'Titius Arist', 'Titus Flavius', 'Titus Larciu', 'Titus Manlius', 'Quintus Trabe', 'Marcus Ulpius', 'Gaius Trebatius', 'Trebius Nige', 'Gaius Vibius', 'Gaius Treboniu', 'Gaius Valerius', 'Tribonianus', 'Pompeius Trogu', 'Lucius Aelius', 'Quintus Aelius', 'Gaius Sempronius', 'Publius Sempronius', 'Tullia Ciceroni', 'Tullus Hostiliu', 'Quintus Marcius', 'Turia', 'Turnus', 'Sextus Turpiliu', 'Turrianus Gracili', 'Clodius Turrinu', 'Tuticanus', 'Ulpianus of', 'Domitius Ulpianu', 'Marcus Ulpius', 'Urbanus', 'Septimius Vaballathu', 'Vagellius', 'Valens', 'Fabius Valen', 'Vettius Valen', 'Valentinian I', 'Valentinian I', 'Valentinian II', 'Publius Licinius', 'Valerius Aedituu', 'Valerius Antia', 'Decimus Valerius', 'Publius Valerius', 'Marcus Valerius', 'Gaius Calpetanus', 'Gaius Valerius', 'Lucius Valerius', 'Valerius Maximu', 'Publius Valerius', 'Lucius Valerius', 'Quintus Valerius', 'Quintus Valerius', 'Valgius Rufu', 'Vallius Syriacu', 'Varenus Rufu', 'Quintus Vargunteiu', 'Quintus Variu', 'Varius Rufu', 'Gaius Terentius', 'Marcus Terentius', 'Publius Terentius', 'Aulus Terentius', 'Publius Attius', 'Publius Quinctilius', 'Quinctilius Varu', 'Arrius Varu', 'Publius Vatiniu', 'Publius Vedius', 'Flavius Vegetius', 'Aulus Didius', 'Velius Longu', 'Velleius Paterculu', 'Venantius Honorius', 'Vennonius', 'Publius Ventidiu', 'Ventidius Cumanu', 'Verginia', 'Verginius Flavu', 'Lucius Verginius', 'Gaius Verre', 'Lucius Veru', 'Lucius Vettiu', 'Vettius Philocomu', 'Lucius Vettius', 'Caelius Vibenn', 'Quintus Vibius', 'Gaius Vibius', 'Gaius Vibius', 'Gaius Vibius', 'Gaius Marius', 'Maximus Victorinu', 'Lucius Villius', 'Gaius Julius', 'Annius Vinicianu', 'Lucius Viniciu', 'Marcus Viniciu', 'Publius Viniciu', 'Titus Viniu', 'Publius Vergilius', 'Viriathus', 'Aulus Vitelliu', 'Lucius Vitelliu', 'Vitruvius', 'Gaius Dillius', 'Volcatius Sedigitu', 'Volcacius Moschu', 'Lucius Voltacilius', 'Publius Volumniu', 'Gnaeus Manlius', 'Lucius Manlius'];

module.exports = names;


},{}],3:[function(require,module,exports){
'use strict';

var drd = require('definitely-random-data');
require('./markov-chain-source');
module.exports = new drd.Generator();


},{"./markov-chain-source":5,"definitely-random-data":6}],4:[function(require,module,exports){
'use strict';

var fabrico = require('./fabrico');
var name = exports.name = fabrico.markov(require('./data/names/roman-name'));
var gender = exports.gender = fabrico.list(['male', 'female']);

var humanEyes = fabrico.list(['brown', 'blue', 'green', 'hazel']);
var elfEyes = fabrico.list(['brown', 'blue', 'green', 'white', 'silver', 'black']);
var halfElfEyes = fabrico.oneOf(humanEyes, elfEyes);
var dwarfEyes = fabrico.list(['brown', 'dark brown', 'black']);
var gnomeEyes = fabrico.list(['blue', 'green', 'red', 'orange']);

//I'm lazy
var hair = fabrico.list(['brown', 'blonde', 'red', 'gray', 'white', 'silver']);

var adventurer = fabrico.list('wizard', 'fighter', 'rogue');
var profession = fabrico.oneOf('baker', 'smith', 'carpenter', 'elder', 'councilman', 'peasant', 'drunkard', 'commoner', 'noble', adventurer);

var commonInventory = fabrico.list(['dagger', 'necklace', 'ring']).repeat(0, 3);
var professionInventory = {
    drunkard: fabrico.list(['beer', 'ale', 'whiskey']),
    wizard: fabrico.tokens('spellbook', fabrico.literal('scrollcase').flip(), fabrico.list(['quarterstaff', 'wand', 'crossbow'])),
    fighter: fabrico.tokens('armor', fabrico.literal('shield').repeat(0, 1), fabrico.list(['sword', 'dagger', 'crossbow', 'bow', 'axe'])),
    rogue: fabrico.tokens('lock picks', fabrico.literal('contraband').repeat(0, 1), fabrico.list(['disguise kit', 'dagger', 'bow']))
};

var inventory = function inventory(char) {

    var ret = commonInventory.get();
    var prof = char.profession;
    if (!prof) return ret;

    var other = professionInventory[prof];
    if (!other) return ret;

    return ret.concat(other.get());
};

var human = exports.human = fabrico.map({ name: name, race: 'human', gender: gender, eyes: humanEyes, hair: hair, profession: profession, inventory: inventory });
var elf = exports.elf = fabrico.map({ name: name, race: 'elf', gender: gender, eyes: elfEyes, hair: hair, profession: profession, inventory: inventory });
var halfElf = exports.helfElf = fabrico.map({ name: name, race: 'half-elf', gender: gender, eyes: halfElfEyes, hair: hair, profession: profession, inventory: inventory });
var dwarf = exports.dwarf = fabrico.map({ name: name, race: 'dwarf', gender: gender, eyes: dwarfEyes, hair: hair, profession: profession, inventory: inventory });
var gnome = exports.gnome = fabrico.map({ name: name, race: 'gnome', gender: gender, eyes: gnomeEyes, hair: hair, profession: profession, inventory: inventory });

var character = exports.character = fabrico.oneOf(human, elf, dwarf, gnome, halfElf);


},{"./data/names/roman-name":2,"./fabrico":3}],5:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var drd = require('definitely-random-data');

var MarkovChainSource = function (_drd$AbstractSource) {
  _inherits(MarkovChainSource, _drd$AbstractSource);

  function MarkovChainSource(list) {
    _classCallCheck(this, MarkovChainSource);

    var _this = _possibleConstructorReturn(this, (MarkovChainSource.__proto__ || Object.getPrototypeOf(MarkovChainSource)).call(this));

    _this.list = list;
    _this.chain = null;
    return _this;
  }

  _createClass(MarkovChainSource, [{
    key: 'getItem',
    value: function getItem(rng) {

      if (this.chain === null) {
        this.chain = construct_chain(this.list);
      }

      return markov_name(this.chain, rng || drd.Defaults.defaultRng);
    }
  }]);

  return MarkovChainSource;
}(drd.AbstractSource);

exports.MarkovChainSource = MarkovChainSource;

/*
Extend DRD to have a markov source
*/
drd.Generator.prototype.markov = function (list) {
  return new MarkovChainSource(list);
};

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// name_generator.js
// written and released to the public domain by drow <drow@bin.sh>
// http://creativecommons.org/publicdomain/zero/1.0/
// https://donjon.bin.sh/code/name/name_generator.js

var name_set = {};
var chain_cache = {};

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// generator function

function generate_name(type) {
  var chain;if (chain = markov_chain(type)) {
    return markov_name(chain);
  }
  return '';
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// get markov chain by type

function markov_chain(type) {
  var chain;if (chain = chain_cache[type]) {
    return chain;
  } else {
    var list;if (list = name_set[type]) {
      var chain;if (chain = construct_chain(list)) {
        chain_cache[type] = chain;
        return chain;
      }
    }
  }
  return false;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// construct markov chain from list of names

function construct_chain(list) {
  var chain = {};

  var i;for (i = 0; i < list.length; i++) {
    var names = list[i].split(/\s+/);
    chain = incr_chain(chain, 'parts', names.length);

    var j;for (j = 0; j < names.length; j++) {
      var name = names[j];
      chain = incr_chain(chain, 'name_len', name.length);

      var c = name.substr(0, 1);
      chain = incr_chain(chain, 'initial', c);

      var string = name.substr(1);
      var last_c = c;

      while (string.length > 0) {
        var c = string.substr(0, 1);
        chain = incr_chain(chain, last_c, c);

        string = string.substr(1);
        last_c = c;
      }
    }
  }
  return scale_chain(chain);
}
function incr_chain(chain, key, token) {
  if (chain[key]) {
    if (chain[key][token]) {
      chain[key][token]++;
    } else {
      chain[key][token] = 1;
    }
  } else {
    chain[key] = {};
    chain[key][token] = 1;
  }
  return chain;
}
function scale_chain(chain) {
  var table_len = {};

  var key;for (key in chain) {
    table_len[key] = 0;

    var token;for (token in chain[key]) {
      var count = chain[key][token];
      var weighted = Math.floor(Math.pow(count, 1.3));

      chain[key][token] = weighted;
      table_len[key] += weighted;
    }
  }
  chain['table_len'] = table_len;
  return chain;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// construct name from markov chain

function markov_name(chain, rng) {
  var parts = select_link(chain, 'parts', rng);
  var names = [];

  var i;for (i = 0; i < parts; i++) {
    var name_len = select_link(chain, 'name_len', rng);
    var c = select_link(chain, 'initial', rng);
    var name = c;
    var last_c = c;

    while (name.length < name_len) {
      c = select_link(chain, last_c, rng);
      name += c;
      last_c = c;
    }
    names.push(name);
  }
  return names.join(' ');
}
function select_link(chain, key, rng) {
  var len = chain['table_len'][key];
  var idx = rng ? rng.getRandomInt(0, len) : Math.floor(Math.random() * len);

  var t = 0;for (var token in chain[key]) {
    t += chain[key][token];
    if (idx < t) {
      return token;
    }
  }
  return '-';
}


},{"definitely-random-data":6}],6:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var seedrandom = require('seedrandom');
var util = require('util');

var Prng = function () {
  function Prng(fn) {
    _classCallCheck(this, Prng);

    this.fn = fn || Math.random;
  }

  _createClass(Prng, [{
    key: 'getRandomInt',
    value: function getRandomInt(min, max) {
      min = Math.ceil(min);
      max = Math.floor(max);
      return Math.floor(this.fn() * (max - min)) + min;
    }
  }, {
    key: 'getRandomFloat',
    value: function getRandomFloat(min, max) {
      if (util.isUndefined(min)) min = 0;
      if (util.isUndefined(max)) max = 1;

      return this.fn() * (max - min) + min;
    }
  }]);

  return Prng;
}();

var defaults = {
  defaultRng: new Prng(seedrandom())
};

var Source = function () {
  function Source() {
    _classCallCheck(this, Source);
  }

  _createClass(Source, [{
    key: 'get',
    value: function get(rng) {
      return this.getItem(rng || defaults.defaultRng);
    }
  }, {
    key: 'getItem',
    value: function getItem(rng) {
      throw 'getItem() is not implemented on ' + this.constructor.name;
    }
  }, {
    key: 'repeat',
    value: function repeat(min, max) {
      return new RangeSource(this, min, max);
    }
  }, {
    key: 'withRng',
    value: function withRng(rng) {
      return new RngOverrideSource(this, rng);
    }

    /*
    Wraps a source such that it will execute only if a certain probability is met.
    It's basically a special case of repeat(0, 1). 
    
    repeat(0,1) is an uniform distribution of 0 or 1 and would be the same as flip() or flip(0.5).  However the 
    result of a flip isn't necessarily an array (whereas repeat(0,1) is), and the probability is controlled
    
    */

  }, {
    key: 'flip',
    value: function flip(successProbability, defaultValue) {
      return new FlipSource(this, successProbability, defaultValue);
    }
  }]);

  return Source;
}();

var ListSource = function (_Source) {
  _inherits(ListSource, _Source);

  function ListSource(obj, ctx) {
    _classCallCheck(this, ListSource);

    var _this = _possibleConstructorReturn(this, (ListSource.__proto__ || Object.getPrototypeOf(ListSource)).call(this, ctx));

    _this.list = obj;
    return _this;
  }

  _createClass(ListSource, [{
    key: 'getItem',
    value: function getItem(rng) {
      var idx = rng.getRandomInt(0, this.list.length);
      return this.list[idx];
    }
  }]);

  return ListSource;
}(Source);

function flatten(arr) {
  return arr.reduce(function (f, a) {
    return f.concat(Array.isArray(a) ? flatten(a) : a);
  }, []);
}

var RngOverrideSource = function (_Source2) {
  _inherits(RngOverrideSource, _Source2);

  function RngOverrideSource(src, rng) {
    _classCallCheck(this, RngOverrideSource);

    var _this2 = _possibleConstructorReturn(this, (RngOverrideSource.__proto__ || Object.getPrototypeOf(RngOverrideSource)).call(this));

    _this2.src = src;
    _this2.rng = rng;
    return _this2;
  }

  _createClass(RngOverrideSource, [{
    key: 'getItem',
    value: function getItem() {
      return this.src.get(this.rng);
    }
  }]);

  return RngOverrideSource;
}(Source);

var RangeSource = function (_Source3) {
  _inherits(RangeSource, _Source3);

  function RangeSource(src, min, max) {
    _classCallCheck(this, RangeSource);

    var _this3 = _possibleConstructorReturn(this, (RangeSource.__proto__ || Object.getPrototypeOf(RangeSource)).call(this));

    _this3.src = src;
    _this3.min = min;
    _this3.max = Math.max(max || 1, min);
    return _this3;
  }

  _createClass(RangeSource, [{
    key: 'getItem',
    value: function getItem(rng) {

      var ret = [];

      var n = 1;
      if (this.min !== 1 || this.max !== 1) n = rng.getRandomInt(this.min, this.max + 1);

      for (var idx = 0; idx < n; idx++) {
        //don't pass the possibly overriden rng down to the next level (prevents infinite overrides)
        ret.push(this.src.get());
      }

      return flatten(ret);
    }
  }]);

  return RangeSource;
}(Source);

var FlipSource = exports.FlipSource = function (_Source4) {
  _inherits(FlipSource, _Source4);

  function FlipSource(src, prob, defaultValue) {
    _classCallCheck(this, FlipSource);

    var _this4 = _possibleConstructorReturn(this, (FlipSource.__proto__ || Object.getPrototypeOf(FlipSource)).call(this));

    _this4.src = src;
    _this4.prob = prob || 0.5;
    _this4.defaultValue = defaultValue;
    return _this4;
  }

  _createClass(FlipSource, [{
    key: 'getItem',
    value: function getItem(rng) {

      if (rng.getRandomFloat() < this.prob) {
        return this.src.get();
      }

      if (this.defaultValue && this.defaultValue instanceof Source) {
        return this.defaultValue.get();
      }

      return this.defaultValue;
    }
  }]);

  return FlipSource;
}(Source);

var LiteralSource = function (_Source5) {
  _inherits(LiteralSource, _Source5);

  function LiteralSource(literal) {
    _classCallCheck(this, LiteralSource);

    var _this5 = _possibleConstructorReturn(this, (LiteralSource.__proto__ || Object.getPrototypeOf(LiteralSource)).call(this));

    _this5.literal = literal;
    return _this5;
  }

  _createClass(LiteralSource, [{
    key: 'getItem',
    value: function getItem() {
      return this.literal;
    }
  }]);

  return LiteralSource;
}(Source);

var TokenSource = function (_Source6) {
  _inherits(TokenSource, _Source6);

  function TokenSource(tokens) {
    _classCallCheck(this, TokenSource);

    var _this6 = _possibleConstructorReturn(this, (TokenSource.__proto__ || Object.getPrototypeOf(TokenSource)).call(this));

    _this6.tokens = tokens;
    return _this6;
  }

  _createClass(TokenSource, [{
    key: 'getItem',
    value: function getItem() {

      var ret = [];

      for (var i = 0; i < this.tokens.length; i++) {
        var token = this.tokens[i];

        if (token instanceof Source) {
          ret.push(token.get());
        } else {
          ret.push(token);
        }
      }

      return flatten(ret);
    }
  }]);

  return TokenSource;
}(Source);

var OneOfTokenSource = exports.OneOfTokenSource = function (_Source7) {
  _inherits(OneOfTokenSource, _Source7);

  function OneOfTokenSource(tokens) {
    _classCallCheck(this, OneOfTokenSource);

    var _this7 = _possibleConstructorReturn(this, (OneOfTokenSource.__proto__ || Object.getPrototypeOf(OneOfTokenSource)).call(this));

    _this7.tokens = tokens;
    return _this7;
  }

  _createClass(OneOfTokenSource, [{
    key: 'getItem',
    value: function getItem(rng) {
      var idx = rng.getRandomInt(0, this.tokens.length);

      var token = this.tokens[idx];

      if (token instanceof Source) {
        return token.get();
      } else {
        return token;
      }
    }
  }]);

  return OneOfTokenSource;
}(Source);

var ObjectTokenSource = exports.ObjectTokenSource = function (_Source8) {
  _inherits(ObjectTokenSource, _Source8);

  function ObjectTokenSource(obj) {
    _classCallCheck(this, ObjectTokenSource);

    var _this8 = _possibleConstructorReturn(this, (ObjectTokenSource.__proto__ || Object.getPrototypeOf(ObjectTokenSource)).call(this));

    _this8.obj = obj;
    return _this8;
  }

  _createClass(ObjectTokenSource, [{
    key: 'getItem',
    value: function getItem() {
      return this.resolveValue(this.obj);
    }
  }, {
    key: 'resolveValue',
    value: function resolveValue(token, parent) {

      if (token === null) return null;

      if (util.isUndefined(token)) return undefined;

      if (token instanceof Source) {
        return token.get();
      } else if (util.isArray(token)) {
        var ret = [];

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = token[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var o = _step.value;

            ret.push(this.resolveValue(o, parent || ret));
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return ret;
      } else if (util.isFunction(token)) {
        return token(parent);
      } else if (util.isObject(token)) {
        var _ret = {};

        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = Object.keys(token)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var key = _step2.value;

            _ret[key] = this.resolveValue(token[key], parent || _ret);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        return _ret;
      }

      return token;
    }
  }]);

  return ObjectTokenSource;
}(Source);

var MarkovChainSource = exports.MarkovChainSource = function (_Source9) {
  _inherits(MarkovChainSource, _Source9);

  function MarkovChainSource(obj) {
    _classCallCheck(this, MarkovChainSource);

    return _possibleConstructorReturn(this, (MarkovChainSource.__proto__ || Object.getPrototypeOf(MarkovChainSource)).call(this));
  }

  _createClass(MarkovChainSource, [{
    key: 'getItem',
    value: function getItem() {
      return this.resolveValue(this.obj);
    }
  }, {
    key: 'resolveValue',
    value: function resolveValue(token, parent) {

      if (token === null) return null;

      if (util.isUndefined(token)) return undefined;

      if (token instanceof Source) {
        return token.get();
      } else if (util.isArray(token)) {
        var ret = [];

        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = token[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var o = _step3.value;

            ret.push(this.resolveValue(o, parent || ret));
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        return ret;
      } else if (util.isFunction(token)) {
        return token(parent);
      } else if (util.isObject(token)) {
        var _ret2 = {};

        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = Object.keys(token)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var key = _step4.value;

            _ret2[key] = this.resolveValue(token[key], parent || _ret2);
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4.return) {
              _iterator4.return();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }

        return _ret2;
      }

      return token;
    }
  }]);

  return MarkovChainSource;
}(Source);

var Generator = function () {
  function Generator() {
    _classCallCheck(this, Generator);
  }

  _createClass(Generator, [{
    key: 'seedPrng',
    value: function seedPrng(seed) {
      defaults.defaultRng = new Prng(seedrandom(seed));
    }
  }, {
    key: 'literal',
    value: function literal(o) {
      return new LiteralSource(o);
    }
  }, {
    key: 'tokens',
    value: function tokens() {
      var arr = Array.prototype.slice.call(arguments, 0);
      return new TokenSource(flatten(arr));
    }
  }, {
    key: 'list',
    value: function list(arr) {
      return new ListSource(arr);
    }
  }, {
    key: 'oneOf',
    value: function oneOf() {
      var arr = Array.prototype.slice.call(arguments, 0);
      return new OneOfTokenSource(arr);
    }
  }, {
    key: 'map',
    value: function map(obj) {
      return new ObjectTokenSource(obj);
    }
  }]);

  return Generator;
}();

exports.ListSource = ListSource;
exports.TokenSource = TokenSource;
exports.LiteralSource = LiteralSource;
exports.RangeSource = RangeSource;
exports.RngOverrideSource = RngOverrideSource;
exports.AbstractSource = Source;
exports.Prng = Prng;
exports.Defaults = defaults;
exports.Generator = Generator;


},{"seedrandom":7,"util":13}],7:[function(require,module,exports){
// A library of seedable RNGs implemented in Javascript.
//
// Usage:
//
// var seedrandom = require('seedrandom');
// var random = seedrandom(1); // or any seed.
// var x = random();       // 0 <= x < 1.  Every bit is random.
// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.

// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.
// Period: ~2^116
// Reported to pass all BigCrush tests.
var alea = require('./lib/alea');

// xor128, a pure xor-shift generator by George Marsaglia.
// Period: 2^128-1.
// Reported to fail: MatrixRank and LinearComp.
var xor128 = require('./lib/xor128');

// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.
// Period: 2^192-2^32
// Reported to fail: CollisionOver, SimpPoker, and LinearComp.
var xorwow = require('./lib/xorwow');

// xorshift7, by François Panneton and Pierre L'ecuyer, takes
// a different approach: it adds robustness by allowing more shifts
// than Marsaglia's original three.  It is a 7-shift generator
// with 256 bits, that passes BigCrush with no systmatic failures.
// Period 2^256-1.
// No systematic BigCrush failures reported.
var xorshift7 = require('./lib/xorshift7');

// xor4096, by Richard Brent, is a 4096-bit xor-shift with a
// very long period that also adds a Weyl generator. It also passes
// BigCrush with no systematic failures.  Its long period may
// be useful if you have many generators and need to avoid
// collisions.
// Period: 2^4128-2^32.
// No systematic BigCrush failures reported.
var xor4096 = require('./lib/xor4096');

// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random
// number generator derived from ChaCha, a modern stream cipher.
// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf
// Period: ~2^127
// No systematic BigCrush failures reported.
var tychei = require('./lib/tychei');

// The original ARC4-based prng included in this library.
// Period: ~2^1600
var sr = require('./seedrandom');

sr.alea = alea;
sr.xor128 = xor128;
sr.xorwow = xorwow;
sr.xorshift7 = xorshift7;
sr.xor4096 = xor4096;
sr.tychei = tychei;

module.exports = sr;

},{"./lib/alea":9,"./lib/tychei":9,"./lib/xor128":9,"./lib/xor4096":9,"./lib/xorshift7":9,"./lib/xorwow":9,"./seedrandom":8}],8:[function(require,module,exports){
/*
Copyright 2014 David Bau.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/

(function (pool, math) {
//
// The following constants are related to IEEE 754 limits.
//
var global = this,
    width = 256,        // each RC4 output is 0 <= x < 256
    chunks = 6,         // at least six RC4 outputs for each double
    digits = 52,        // there are 52 significant digits in a double
    rngname = 'random', // rngname: name for Math.random and Math.seedrandom
    startdenom = math.pow(width, chunks),
    significance = math.pow(2, digits),
    overflow = significance * 2,
    mask = width - 1,
    nodecrypto;         // node.js crypto module, initialized at the bottom.

//
// seedrandom()
// This is the seedrandom function described above.
//
function seedrandom(seed, options, callback) {
  var key = [];
  options = (options == true) ? { entropy: true } : (options || {});

  // Flatten the seed string or build one from local entropy if needed.
  var shortseed = mixkey(flatten(
    options.entropy ? [seed, tostring(pool)] :
    (seed == null) ? autoseed() : seed, 3), key);

  // Use the seed to initialize an ARC4 generator.
  var arc4 = new ARC4(key);

  // This function returns a random double in [0, 1) that contains
  // randomness in every bit of the mantissa of the IEEE 754 value.
  var prng = function() {
    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48
        d = startdenom,                 //   and denominator d = 2 ^ 48.
        x = 0;                          //   and no 'extra last byte'.
    while (n < significance) {          // Fill up all significant digits by
      n = (n + x) * width;              //   shifting numerator and
      d *= width;                       //   denominator and generating a
      x = arc4.g(1);                    //   new least-significant-byte.
    }
    while (n >= overflow) {             // To avoid rounding up, before adding
      n /= 2;                           //   last byte, shift everything
      d /= 2;                           //   right using integer math until
      x >>>= 1;                         //   we have exactly the desired bits.
    }
    return (n + x) / d;                 // Form the number within [0, 1).
  };

  prng.int32 = function() { return arc4.g(4) | 0; }
  prng.quick = function() { return arc4.g(4) / 0x100000000; }
  prng.double = prng;

  // Mix the randomness into accumulated entropy.
  mixkey(tostring(arc4.S), pool);

  // Calling convention: what to return as a function of prng, seed, is_math.
  return (options.pass || callback ||
      function(prng, seed, is_math_call, state) {
        if (state) {
          // Load the arc4 state from the given state if it has an S array.
          if (state.S) { copy(state, arc4); }
          // Only provide the .state method if requested via options.state.
          prng.state = function() { return copy(arc4, {}); }
        }

        // If called as a method of Math (Math.seedrandom()), mutate
        // Math.random because that is how seedrandom.js has worked since v1.0.
        if (is_math_call) { math[rngname] = prng; return seed; }

        // Otherwise, it is a newer calling convention, so return the
        // prng directly.
        else return prng;
      })(
  prng,
  shortseed,
  'global' in options ? options.global : (this == math),
  options.state);
}
math['seed' + rngname] = seedrandom;

//
// ARC4
//
// An ARC4 implementation.  The constructor takes a key in the form of
// an array of at most (width) integers that should be 0 <= x < (width).
//
// The g(count) method returns a pseudorandom integer that concatenates
// the next (count) outputs from ARC4.  Its return value is a number x
// that is in the range 0 <= x < (width ^ count).
//
function ARC4(key) {
  var t, keylen = key.length,
      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];

  // The empty key [] is treated as [0].
  if (!keylen) { key = [keylen++]; }

  // Set up S using the standard key scheduling algorithm.
  while (i < width) {
    s[i] = i++;
  }
  for (i = 0; i < width; i++) {
    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];
    s[j] = t;
  }

  // The "g" method returns the next (count) outputs as one number.
  (me.g = function(count) {
    // Using instance members instead of closure state nearly doubles speed.
    var t, r = 0,
        i = me.i, j = me.j, s = me.S;
    while (count--) {
      t = s[i = mask & (i + 1)];
      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];
    }
    me.i = i; me.j = j;
    return r;
    // For robust unpredictability, the function call below automatically
    // discards an initial batch of values.  This is called RC4-drop[256].
    // See http://google.com/search?q=rsa+fluhrer+response&btnI
  })(width);
}

//
// copy()
// Copies internal state of ARC4 to or from a plain object.
//
function copy(f, t) {
  t.i = f.i;
  t.j = f.j;
  t.S = f.S.slice();
  return t;
};

//
// flatten()
// Converts an object tree to nested arrays of strings.
//
function flatten(obj, depth) {
  var result = [], typ = (typeof obj), prop;
  if (depth && typ == 'object') {
    for (prop in obj) {
      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
    }
  }
  return (result.length ? result : typ == 'string' ? obj : obj + '\0');
}

//
// mixkey()
// Mixes a string seed into a key that is an array of integers, and
// returns a shortened string seed that is equivalent to the result key.
//
function mixkey(seed, key) {
  var stringseed = seed + '', smear, j = 0;
  while (j < stringseed.length) {
    key[mask & j] =
      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));
  }
  return tostring(key);
}

//
// autoseed()
// Returns an object for autoseeding, using window.crypto and Node crypto
// module if available.
//
function autoseed() {
  try {
    if (nodecrypto) { return tostring(nodecrypto.randomBytes(width)); }
    var out = new Uint8Array(width);
    (global.crypto || global.msCrypto).getRandomValues(out);
    return tostring(out);
  } catch (e) {
    var browser = global.navigator,
        plugins = browser && browser.plugins;
    return [+new Date, global, plugins, global.screen, tostring(pool)];
  }
}

//
// tostring()
// Converts an array of charcodes to a string
//
function tostring(a) {
  return String.fromCharCode.apply(0, a);
}

//
// When seedrandom.js is loaded, we immediately mix a few bits
// from the built-in RNG into the entropy pool.  Because we do
// not want to interfere with deterministic PRNG state later,
// seedrandom will not call math.random on its own again after
// initialization.
//
mixkey(math.random(), pool);

//
// Nodejs and AMD support: export the implementation as a module using
// either convention.
//
if ((typeof module) == 'object' && module.exports) {
  module.exports = seedrandom;
  // When in node.js, try using crypto package for autoseeding.
  try {
    nodecrypto = require('crypto');
  } catch (ex) {}
} else if ((typeof define) == 'function' && define.amd) {
  define(function() { return seedrandom; });
}

// End anonymous scope, and pass initial values.
})(
  [],     // pool: entropy pool starts empty
  Math    // math: package containing random, pow, and seedrandom
);

},{"crypto":9}],9:[function(require,module,exports){

},{}],10:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],11:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],12:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],13:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./support/isBuffer":12,"_process":11,"inherits":10}],14:[function(require,module,exports){
const fabrico = require('fabrico');
const fantasy = require('fabrico/dist/fantasy.js');

exports.fabrico = fabrico;

exports.fantasy = fantasy;
exports.maps = {
    terrainMap: require('./maps/terrainmap.js'),
    city: require('./maps/city.js')
};

},{"./maps/city.js":16,"./maps/terrainmap.js":17,"fabrico":3,"fabrico/dist/fantasy.js":4}],15:[function(require,module,exports){
const binHeap = require('binheap');
const _ = require('../underscore.js')._;

function constructPath(cameFrom, current) {
    
    let p = [current];
    
    while(cameFrom[current.id]) {
        current = cameFrom[current.id];
        p.push(current);
    }
    
    return p;
}

class AStarFinder {
    
    constructor() {
    }
    
    diagonalHeuristic(start, end) {
        let D = 1;
        let D2 = Math.SQRT2;
        
        let dx = Math.abs(start.x - end.x);
        let dy = Math.abs(start.y - end.y);
        return D * (dx + dy) + (D2 - 2 * D) * Math.min(dx, dy)
    }
    
    find(map, start, end, heuristic) {
        
        heuristic = heuristic || this.diagonalHeuristic;
        
        let endFn = null;
        if(_.isFunction(end)) {
            endFn = end;
            end = null;
        }
        
        let data = {
            map: map,
            start: start,
            from: {},
            gscore: {},
            fscore: {},
            closedSet: {}
        };
        
        data.openSet = binHeap(function(node) { return data.fscore[node.id]; });
        
        data.gscore[start.id] = 0;
        data.fscore[start.id] = heuristic(start, end);
        data.openSet.push(start);
        
        while(data.openSet.size() > 0) {
            
            let current = data.openSet.pop();
            
            if(current === end || (endFn && endFn(current))) {
                return constructPath(data.from, current);
            }
            
            data.closedSet[current.id] = current;
            for(let n of map.neighbors(current)) {
                
                if(data.closedSet[n.id]) {
                    continue;
                }
                
                let isNew = false;
                let g = data.gscore[current.id] + heuristic(n, current);
                if(data.openSet.heap.indexOf(n) === -1) {
                    //new node
                    data.openSet.push(n);
                    isNew = true;
                } else if(g >= data.gscore[n.id]) {
                    //worse path
                    continue;
                }
                
                data.from[n.id] = current;
                data.gscore[n.id] = g;
                data.fscore[n.id] = g + heuristic(n, end);
                
                if(!isNew) {
                    data.openSet.rescoreElement(n);
                }
            }
        }
        
        return [];
    }
}

module.exports = new AStarFinder();

},{"../underscore.js":18,"binheap":1}],16:[function(require,module,exports){
const drd = require('fabrico/node_modules/definitely-random-data/dist/drd.js');
//                   definitely-random-data
const fabrico = require('fabrico');
const _ = require('../underscore.js')._;
const astar = require('./astar.js');

function defaultNodeProvider(x,y) {
    return {
        id: x + '_' + y,
        x: x,
        y: y,
        movable: true,
        height: 0,
        vegitation: 0,
        water: 0,
        population: 0
    };
}

class MapBuilder {
    
    constructor(x, y, nodeProvider) {
        
        this.nodeProvider = nodeProvider || defaultNodeProvider;
        this.width = x;
        this.height = y;
        this.graph = [];
        for(let yy = 0; yy < y; yy++) {
            
            let row = [];
            this.graph[yy] = row;
            for(let xx = 0; xx < x; xx++) {
                row[xx] = this.nodeProvider(xx, yy);
            }
        }
    }
    
    getNode(x, y) {
        
        if(y >= 0 && y < this.graph.length) {
            if(x >= 0 && x < this.graph[y].length) {
                return this.graph[y][x];
            }
        }
        
        return null;
    } 
    
    neighbors(node) {
        let ret = [];
        
        let n = this.getNode(node.x, node.y+1);
        if(n !== null) ret.push(n);
        
        n = this.getNode(node.x+1, node.y+1);
        if(n !== null) ret.push(n);
    
        n = this.getNode(node.x+1, node.y);
        if(n !== null) ret.push(n);
        
        n = this.getNode(node.x+1, node.y-1);
        if(n !== null) ret.push(n);
    
        n = this.getNode(node.x, node.y-1);
        if(n !== null) ret.push(n);
        
        n = this.getNode(node.x-1, node.y-1);
        if(n !== null) ret.push(n);
        
        n = this.getNode(node.x-1, node.y);
        if(n !== null) ret.push(n);
        
        n = this.getNode(node.x-1, node.y+1);
        if(n !== null) ret.push(n);
        
        return ret;
    }
    
    path(start, end, h) {
        return astar.find(this, start, end, h);
    }
    
    breadthFirstSearch(start, vist, diags) {
        
        let dist = {};
        let parents = {};
        
        let q = [];
        
        dist[start.id] = 0;
        q.push(start);
        let  distFn = astar.diagonalHeuristic;
        
        while(q.length > 0) {
            
            let cur = q.shift();
            for(let n of this.neighbors(cur)) {
                if(_.isUndefined(dist[n.id]) && vist(n, dist[cur.id], cur)) {
                    
                    dist[n.id] = distFn(start, n);
                    parents[n.id] = cur;
                    q.push(n);
                }
            }
        }
        
        return {
            distances: dist,
            parents: parents
        }
    }

}

let builder = exports.builder = function(terrainMap) {
    
    let b = new MapBuilder(terrainMap.width, terrainMap.height, function (x, y) {
        let node = defaultNodeProvider(x, y);
        let t = terrainMap.get(x, y);
        node.height = t.height;
        node.vegitation = t.vegitation;
        node.water = t.water;
        node.population = 0;
        
        return node;
    });
    
    return b;
}

let seedPopulation = exports.seedPopulation = function(b, density) {
    
    let rng = drd.Defaults.defaultRng;
    density = density || 6;
    let distFn = astar.diagonalHeuristic;
    
    let seeds = [];
    
    let maxx = null;
    let maxy = null;
    let minx = null;
    let miny = null;
    
    for(let i=0; i<density; i++) {
        
        let sx = rng.getRandomInt(0, b.width);
        let sy = rng.getRandomInt(0, b.height);
        
        let cur = b.getNode(sx, sy);
        if(cur.water === 255) {
            
            //find nearest non-water tile
            let found = false;
            b.breadthFirstSearch(cur, function(n) {
                
                if(found)
                    return false;
                
                if(n.water === 255)
                    return true;
                
                found = true;
                cur = n;
                return false;
            });
            
            if(cur.water === 255)
                continue; //With that much water it's hopeless
        }
        
        seeds.push(cur);
        
        if(maxx == null || maxx.x < cur.x)
            maxx = cur;
        if(maxy == null || maxy.y < cur.y)
            maxy = cur;
        if(minx == null || minx.x > cur.x)
            minx = cur;
        if(miny == null || miny.y > cur.y)
            miny = cur;
    }
    
    let furtherestPair = null;
    let furtherestDist = null;
    
    let dists = [maxx, maxy, minx, miny];
    
    for(let i=0; i<dists.length; i++) {
        let a = dists[i];
        for(let k=i+1; k<dists.length; k++) {
            let b = dists[k];
            let d = distFn(a, b);
            if(furtherestDist == null || d > furtherestDist) {
                furtherestPair = [a, b];
                furtherestDist = d;
            }
        }
    }
    
    let weightFn = function(a, b) {
        
        //every change of elevation of 17 costs 1 tile
        //every change of vegitation of 17 costs 1 tile
        //every water costs 8 tiles
        
        if(a == null || b == null)
            return 1;
        
        let dh = Math.abs(a.height - b.height) / 17;
        let dv = Math.abs(a.vegitation - b.vegitation) / 17;
        let dw = (a.water > 0 ? 8 : 0) + (b.water > 0 ? 8 : 0);
        
        return 1 + dh + dv + dw;
    };
    
    let mainRoad = [];
    let sideRoads = [];
    
    for(let o of b.path(furtherestPair[0], furtherestPair[1], weightFn)) {
        o.population = 255;
        mainRoad[o.id] = o;
    }
    
    for(let cur of seeds) {
        
        let cur = seeds.shift();
        if(cur === furtherestPair[0] || cur === furtherestPair[1]) {
            continue;
        }
        
        let p = astar.find(b, cur, function(end) { return end != null && mainRoad[end.id]; }, weightFn);
        
        for(let o of p) {
            o.population = 255;
        }
    }
    
    return b;
}


},{"../underscore.js":18,"./astar.js":15,"fabrico":3,"fabrico/node_modules/definitely-random-data/dist/drd.js":6}],17:[function(require,module,exports){
/*

TerrainMap -

    

*/

let terrainmap = module.exports = class TerrainMap {
    
    /*
     * RGBA format 1d array
     */
    constructor(data, width, height) {
        this.data = data;
        this.width = width;
        this.height = height;
    }
    
    /*
     Load image into heighmap. RGBA format 1d array
     
     Red = Elevation
     Green = Vegitation density 
            0 = rocky/barren
            255 = thick forest/jungle
     Blue = Water density 
            0 = ground
            1 - 127 = reserved ?
            128 = swamp
            255 = impassible without boat
     A = ??
     
     */
    get(x, y) {
        
        if(x < 0 ||    x >= this.width || y < 0 || y >= this.height) {
            return null;
        }
        
        let w = this.width;
        let h = this.height;
        
        let idx = y * w + x;
        idx *= 4;//there's 4 bytes
        
        let r = this.data[idx];
        let g = this.data[idx+1];
        let b = this.data[idx+2];
        let a = this.data[idx+3];
        
        return {
            
            height: r,
            vegitation: g,
            water: b
            
        };
    }
    
    /*
    /*
     * Create map from noise
     *
    static create(width, height, noiseFn) {
        
        
        
    }
    */
}

},{}],18:[function(require,module,exports){
//     Underscore.js 1.8.3
//     http://underscorejs.org
//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.
(function(){function n(n){function t(t,r,e,u,i,o){for(;i>=0&&o>i;i+=n){var a=u?u[i]:i;e=r(e,t[a],a,t)}return e}return function(r,e,u,i){e=b(e,i,4);var o=!k(r)&&m.keys(r),a=(o||r).length,c=n>0?0:a-1;return arguments.length<3&&(u=r[o?o[c]:c],c+=n),t(r,e,u,o,c,a)}}function t(n){return function(t,r,e){r=x(r,e);for(var u=O(t),i=n>0?0:u-1;i>=0&&u>i;i+=n)if(r(t[i],i,t))return i;return-1}}function r(n,t,r){return function(e,u,i){var o=0,a=O(e);if("number"==typeof i)n>0?o=i>=0?i:Math.max(i+a,o):a=i>=0?Math.min(i+1,a):i+a+1;else if(r&&i&&a)return i=r(e,u),e[i]===u?i:-1;if(u!==u)return i=t(l.call(e,o,a),m.isNaN),i>=0?i+o:-1;for(i=n>0?o:a-1;i>=0&&a>i;i+=n)if(e[i]===u)return i;return-1}}function e(n,t){var r=I.length,e=n.constructor,u=m.isFunction(e)&&e.prototype||a,i="constructor";for(m.has(n,i)&&!m.contains(t,i)&&t.push(i);r--;)i=I[r],i in n&&n[i]!==u[i]&&!m.contains(t,i)&&t.push(i)}var u=this,i=u._,o=Array.prototype,a=Object.prototype,c=Function.prototype,f=o.push,l=o.slice,s=a.toString,p=a.hasOwnProperty,h=Array.isArray,v=Object.keys,g=c.bind,y=Object.create,d=function(){},m=function(n){return n instanceof m?n:this instanceof m?void(this._wrapped=n):new m(n)};"undefined"!=typeof exports?("undefined"!=typeof module&&module.exports&&(exports=module.exports=m),exports._=m):u._=m,m.VERSION="1.8.3";var b=function(n,t,r){if(t===void 0)return n;switch(null==r?3:r){case 1:return function(r){return n.call(t,r)};case 2:return function(r,e){return n.call(t,r,e)};case 3:return function(r,e,u){return n.call(t,r,e,u)};case 4:return function(r,e,u,i){return n.call(t,r,e,u,i)}}return function(){return n.apply(t,arguments)}},x=function(n,t,r){return null==n?m.identity:m.isFunction(n)?b(n,t,r):m.isObject(n)?m.matcher(n):m.property(n)};m.iteratee=function(n,t){return x(n,t,1/0)};var _=function(n,t){return function(r){var e=arguments.length;if(2>e||null==r)return r;for(var u=1;e>u;u++)for(var i=arguments[u],o=n(i),a=o.length,c=0;a>c;c++){var f=o[c];t&&r[f]!==void 0||(r[f]=i[f])}return r}},j=function(n){if(!m.isObject(n))return{};if(y)return y(n);d.prototype=n;var t=new d;return d.prototype=null,t},w=function(n){return function(t){return null==t?void 0:t[n]}},A=Math.pow(2,53)-1,O=w("length"),k=function(n){var t=O(n);return"number"==typeof t&&t>=0&&A>=t};m.each=m.forEach=function(n,t,r){t=b(t,r);var e,u;if(k(n))for(e=0,u=n.length;u>e;e++)t(n[e],e,n);else{var i=m.keys(n);for(e=0,u=i.length;u>e;e++)t(n[i[e]],i[e],n)}return n},m.map=m.collect=function(n,t,r){t=x(t,r);for(var e=!k(n)&&m.keys(n),u=(e||n).length,i=Array(u),o=0;u>o;o++){var a=e?e[o]:o;i[o]=t(n[a],a,n)}return i},m.reduce=m.foldl=m.inject=n(1),m.reduceRight=m.foldr=n(-1),m.find=m.detect=function(n,t,r){var e;return e=k(n)?m.findIndex(n,t,r):m.findKey(n,t,r),e!==void 0&&e!==-1?n[e]:void 0},m.filter=m.select=function(n,t,r){var e=[];return t=x(t,r),m.each(n,function(n,r,u){t(n,r,u)&&e.push(n)}),e},m.reject=function(n,t,r){return m.filter(n,m.negate(x(t)),r)},m.every=m.all=function(n,t,r){t=x(t,r);for(var e=!k(n)&&m.keys(n),u=(e||n).length,i=0;u>i;i++){var o=e?e[i]:i;if(!t(n[o],o,n))return!1}return!0},m.some=m.any=function(n,t,r){t=x(t,r);for(var e=!k(n)&&m.keys(n),u=(e||n).length,i=0;u>i;i++){var o=e?e[i]:i;if(t(n[o],o,n))return!0}return!1},m.contains=m.includes=m.include=function(n,t,r,e){return k(n)||(n=m.values(n)),("number"!=typeof r||e)&&(r=0),m.indexOf(n,t,r)>=0},m.invoke=function(n,t){var r=l.call(arguments,2),e=m.isFunction(t);return m.map(n,function(n){var u=e?t:n[t];return null==u?u:u.apply(n,r)})},m.pluck=function(n,t){return m.map(n,m.property(t))},m.where=function(n,t){return m.filter(n,m.matcher(t))},m.findWhere=function(n,t){return m.find(n,m.matcher(t))},m.max=function(n,t,r){var e,u,i=-1/0,o=-1/0;if(null==t&&null!=n){n=k(n)?n:m.values(n);for(var a=0,c=n.length;c>a;a++)e=n[a],e>i&&(i=e)}else t=x(t,r),m.each(n,function(n,r,e){u=t(n,r,e),(u>o||u===-1/0&&i===-1/0)&&(i=n,o=u)});return i},m.min=function(n,t,r){var e,u,i=1/0,o=1/0;if(null==t&&null!=n){n=k(n)?n:m.values(n);for(var a=0,c=n.length;c>a;a++)e=n[a],i>e&&(i=e)}else t=x(t,r),m.each(n,function(n,r,e){u=t(n,r,e),(o>u||1/0===u&&1/0===i)&&(i=n,o=u)});return i},m.shuffle=function(n){for(var t,r=k(n)?n:m.values(n),e=r.length,u=Array(e),i=0;e>i;i++)t=m.random(0,i),t!==i&&(u[i]=u[t]),u[t]=r[i];return u},m.sample=function(n,t,r){return null==t||r?(k(n)||(n=m.values(n)),n[m.random(n.length-1)]):m.shuffle(n).slice(0,Math.max(0,t))},m.sortBy=function(n,t,r){return t=x(t,r),m.pluck(m.map(n,function(n,r,e){return{value:n,index:r,criteria:t(n,r,e)}}).sort(function(n,t){var r=n.criteria,e=t.criteria;if(r!==e){if(r>e||r===void 0)return 1;if(e>r||e===void 0)return-1}return n.index-t.index}),"value")};var F=function(n){return function(t,r,e){var u={};return r=x(r,e),m.each(t,function(e,i){var o=r(e,i,t);n(u,e,o)}),u}};m.groupBy=F(function(n,t,r){m.has(n,r)?n[r].push(t):n[r]=[t]}),m.indexBy=F(function(n,t,r){n[r]=t}),m.countBy=F(function(n,t,r){m.has(n,r)?n[r]++:n[r]=1}),m.toArray=function(n){return n?m.isArray(n)?l.call(n):k(n)?m.map(n,m.identity):m.values(n):[]},m.size=function(n){return null==n?0:k(n)?n.length:m.keys(n).length},m.partition=function(n,t,r){t=x(t,r);var e=[],u=[];return m.each(n,function(n,r,i){(t(n,r,i)?e:u).push(n)}),[e,u]},m.first=m.head=m.take=function(n,t,r){return null==n?void 0:null==t||r?n[0]:m.initial(n,n.length-t)},m.initial=function(n,t,r){return l.call(n,0,Math.max(0,n.length-(null==t||r?1:t)))},m.last=function(n,t,r){return null==n?void 0:null==t||r?n[n.length-1]:m.rest(n,Math.max(0,n.length-t))},m.rest=m.tail=m.drop=function(n,t,r){return l.call(n,null==t||r?1:t)},m.compact=function(n){return m.filter(n,m.identity)};var S=function(n,t,r,e){for(var u=[],i=0,o=e||0,a=O(n);a>o;o++){var c=n[o];if(k(c)&&(m.isArray(c)||m.isArguments(c))){t||(c=S(c,t,r));var f=0,l=c.length;for(u.length+=l;l>f;)u[i++]=c[f++]}else r||(u[i++]=c)}return u};m.flatten=function(n,t){return S(n,t,!1)},m.without=function(n){return m.difference(n,l.call(arguments,1))},m.uniq=m.unique=function(n,t,r,e){m.isBoolean(t)||(e=r,r=t,t=!1),null!=r&&(r=x(r,e));for(var u=[],i=[],o=0,a=O(n);a>o;o++){var c=n[o],f=r?r(c,o,n):c;t?(o&&i===f||u.push(c),i=f):r?m.contains(i,f)||(i.push(f),u.push(c)):m.contains(u,c)||u.push(c)}return u},m.union=function(){return m.uniq(S(arguments,!0,!0))},m.intersection=function(n){for(var t=[],r=arguments.length,e=0,u=O(n);u>e;e++){var i=n[e];if(!m.contains(t,i)){for(var o=1;r>o&&m.contains(arguments[o],i);o++);o===r&&t.push(i)}}return t},m.difference=function(n){var t=S(arguments,!0,!0,1);return m.filter(n,function(n){return!m.contains(t,n)})},m.zip=function(){return m.unzip(arguments)},m.unzip=function(n){for(var t=n&&m.max(n,O).length||0,r=Array(t),e=0;t>e;e++)r[e]=m.pluck(n,e);return r},m.object=function(n,t){for(var r={},e=0,u=O(n);u>e;e++)t?r[n[e]]=t[e]:r[n[e][0]]=n[e][1];return r},m.findIndex=t(1),m.findLastIndex=t(-1),m.sortedIndex=function(n,t,r,e){r=x(r,e,1);for(var u=r(t),i=0,o=O(n);o>i;){var a=Math.floor((i+o)/2);r(n[a])<u?i=a+1:o=a}return i},m.indexOf=r(1,m.findIndex,m.sortedIndex),m.lastIndexOf=r(-1,m.findLastIndex),m.range=function(n,t,r){null==t&&(t=n||0,n=0),r=r||1;for(var e=Math.max(Math.ceil((t-n)/r),0),u=Array(e),i=0;e>i;i++,n+=r)u[i]=n;return u};var E=function(n,t,r,e,u){if(!(e instanceof t))return n.apply(r,u);var i=j(n.prototype),o=n.apply(i,u);return m.isObject(o)?o:i};m.bind=function(n,t){if(g&&n.bind===g)return g.apply(n,l.call(arguments,1));if(!m.isFunction(n))throw new TypeError("Bind must be called on a function");var r=l.call(arguments,2),e=function(){return E(n,e,t,this,r.concat(l.call(arguments)))};return e},m.partial=function(n){var t=l.call(arguments,1),r=function(){for(var e=0,u=t.length,i=Array(u),o=0;u>o;o++)i[o]=t[o]===m?arguments[e++]:t[o];for(;e<arguments.length;)i.push(arguments[e++]);return E(n,r,this,this,i)};return r},m.bindAll=function(n){var t,r,e=arguments.length;if(1>=e)throw new Error("bindAll must be passed function names");for(t=1;e>t;t++)r=arguments[t],n[r]=m.bind(n[r],n);return n},m.memoize=function(n,t){var r=function(e){var u=r.cache,i=""+(t?t.apply(this,arguments):e);return m.has(u,i)||(u[i]=n.apply(this,arguments)),u[i]};return r.cache={},r},m.delay=function(n,t){var r=l.call(arguments,2);return setTimeout(function(){return n.apply(null,r)},t)},m.defer=m.partial(m.delay,m,1),m.throttle=function(n,t,r){var e,u,i,o=null,a=0;r||(r={});var c=function(){a=r.leading===!1?0:m.now(),o=null,i=n.apply(e,u),o||(e=u=null)};return function(){var f=m.now();a||r.leading!==!1||(a=f);var l=t-(f-a);return e=this,u=arguments,0>=l||l>t?(o&&(clearTimeout(o),o=null),a=f,i=n.apply(e,u),o||(e=u=null)):o||r.trailing===!1||(o=setTimeout(c,l)),i}},m.debounce=function(n,t,r){var e,u,i,o,a,c=function(){var f=m.now()-o;t>f&&f>=0?e=setTimeout(c,t-f):(e=null,r||(a=n.apply(i,u),e||(i=u=null)))};return function(){i=this,u=arguments,o=m.now();var f=r&&!e;return e||(e=setTimeout(c,t)),f&&(a=n.apply(i,u),i=u=null),a}},m.wrap=function(n,t){return m.partial(t,n)},m.negate=function(n){return function(){return!n.apply(this,arguments)}},m.compose=function(){var n=arguments,t=n.length-1;return function(){for(var r=t,e=n[t].apply(this,arguments);r--;)e=n[r].call(this,e);return e}},m.after=function(n,t){return function(){return--n<1?t.apply(this,arguments):void 0}},m.before=function(n,t){var r;return function(){return--n>0&&(r=t.apply(this,arguments)),1>=n&&(t=null),r}},m.once=m.partial(m.before,2);var M=!{toString:null}.propertyIsEnumerable("toString"),I=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"];m.keys=function(n){if(!m.isObject(n))return[];if(v)return v(n);var t=[];for(var r in n)m.has(n,r)&&t.push(r);return M&&e(n,t),t},m.allKeys=function(n){if(!m.isObject(n))return[];var t=[];for(var r in n)t.push(r);return M&&e(n,t),t},m.values=function(n){for(var t=m.keys(n),r=t.length,e=Array(r),u=0;r>u;u++)e[u]=n[t[u]];return e},m.mapObject=function(n,t,r){t=x(t,r);for(var e,u=m.keys(n),i=u.length,o={},a=0;i>a;a++)e=u[a],o[e]=t(n[e],e,n);return o},m.pairs=function(n){for(var t=m.keys(n),r=t.length,e=Array(r),u=0;r>u;u++)e[u]=[t[u],n[t[u]]];return e},m.invert=function(n){for(var t={},r=m.keys(n),e=0,u=r.length;u>e;e++)t[n[r[e]]]=r[e];return t},m.functions=m.methods=function(n){var t=[];for(var r in n)m.isFunction(n[r])&&t.push(r);return t.sort()},m.extend=_(m.allKeys),m.extendOwn=m.assign=_(m.keys),m.findKey=function(n,t,r){t=x(t,r);for(var e,u=m.keys(n),i=0,o=u.length;o>i;i++)if(e=u[i],t(n[e],e,n))return e},m.pick=function(n,t,r){var e,u,i={},o=n;if(null==o)return i;m.isFunction(t)?(u=m.allKeys(o),e=b(t,r)):(u=S(arguments,!1,!1,1),e=function(n,t,r){return t in r},o=Object(o));for(var a=0,c=u.length;c>a;a++){var f=u[a],l=o[f];e(l,f,o)&&(i[f]=l)}return i},m.omit=function(n,t,r){if(m.isFunction(t))t=m.negate(t);else{var e=m.map(S(arguments,!1,!1,1),String);t=function(n,t){return!m.contains(e,t)}}return m.pick(n,t,r)},m.defaults=_(m.allKeys,!0),m.create=function(n,t){var r=j(n);return t&&m.extendOwn(r,t),r},m.clone=function(n){return m.isObject(n)?m.isArray(n)?n.slice():m.extend({},n):n},m.tap=function(n,t){return t(n),n},m.isMatch=function(n,t){var r=m.keys(t),e=r.length;if(null==n)return!e;for(var u=Object(n),i=0;e>i;i++){var o=r[i];if(t[o]!==u[o]||!(o in u))return!1}return!0};var N=function(n,t,r,e){if(n===t)return 0!==n||1/n===1/t;if(null==n||null==t)return n===t;n instanceof m&&(n=n._wrapped),t instanceof m&&(t=t._wrapped);var u=s.call(n);if(u!==s.call(t))return!1;switch(u){case"[object RegExp]":case"[object String]":return""+n==""+t;case"[object Number]":return+n!==+n?+t!==+t:0===+n?1/+n===1/t:+n===+t;case"[object Date]":case"[object Boolean]":return+n===+t}var i="[object Array]"===u;if(!i){if("object"!=typeof n||"object"!=typeof t)return!1;var o=n.constructor,a=t.constructor;if(o!==a&&!(m.isFunction(o)&&o instanceof o&&m.isFunction(a)&&a instanceof a)&&"constructor"in n&&"constructor"in t)return!1}r=r||[],e=e||[];for(var c=r.length;c--;)if(r[c]===n)return e[c]===t;if(r.push(n),e.push(t),i){if(c=n.length,c!==t.length)return!1;for(;c--;)if(!N(n[c],t[c],r,e))return!1}else{var f,l=m.keys(n);if(c=l.length,m.keys(t).length!==c)return!1;for(;c--;)if(f=l[c],!m.has(t,f)||!N(n[f],t[f],r,e))return!1}return r.pop(),e.pop(),!0};m.isEqual=function(n,t){return N(n,t)},m.isEmpty=function(n){return null==n?!0:k(n)&&(m.isArray(n)||m.isString(n)||m.isArguments(n))?0===n.length:0===m.keys(n).length},m.isElement=function(n){return!(!n||1!==n.nodeType)},m.isArray=h||function(n){return"[object Array]"===s.call(n)},m.isObject=function(n){var t=typeof n;return"function"===t||"object"===t&&!!n},m.each(["Arguments","Function","String","Number","Date","RegExp","Error"],function(n){m["is"+n]=function(t){return s.call(t)==="[object "+n+"]"}}),m.isArguments(arguments)||(m.isArguments=function(n){return m.has(n,"callee")}),"function"!=typeof/./&&"object"!=typeof Int8Array&&(m.isFunction=function(n){return"function"==typeof n||!1}),m.isFinite=function(n){return isFinite(n)&&!isNaN(parseFloat(n))},m.isNaN=function(n){return m.isNumber(n)&&n!==+n},m.isBoolean=function(n){return n===!0||n===!1||"[object Boolean]"===s.call(n)},m.isNull=function(n){return null===n},m.isUndefined=function(n){return n===void 0},m.has=function(n,t){return null!=n&&p.call(n,t)},m.noConflict=function(){return u._=i,this},m.identity=function(n){return n},m.constant=function(n){return function(){return n}},m.noop=function(){},m.property=w,m.propertyOf=function(n){return null==n?function(){}:function(t){return n[t]}},m.matcher=m.matches=function(n){return n=m.extendOwn({},n),function(t){return m.isMatch(t,n)}},m.times=function(n,t,r){var e=Array(Math.max(0,n));t=b(t,r,1);for(var u=0;n>u;u++)e[u]=t(u);return e},m.random=function(n,t){return null==t&&(t=n,n=0),n+Math.floor(Math.random()*(t-n+1))},m.now=Date.now||function(){return(new Date).getTime()};var B={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},T=m.invert(B),R=function(n){var t=function(t){return n[t]},r="(?:"+m.keys(n).join("|")+")",e=RegExp(r),u=RegExp(r,"g");return function(n){return n=null==n?"":""+n,e.test(n)?n.replace(u,t):n}};m.escape=R(B),m.unescape=R(T),m.result=function(n,t,r){var e=null==n?void 0:n[t];return e===void 0&&(e=r),m.isFunction(e)?e.call(n):e};var q=0;m.uniqueId=function(n){var t=++q+"";return n?n+t:t},m.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var K=/(.)^/,z={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},D=/\\|'|\r|\n|\u2028|\u2029/g,L=function(n){return"\\"+z[n]};m.template=function(n,t,r){!t&&r&&(t=r),t=m.defaults({},t,m.templateSettings);var e=RegExp([(t.escape||K).source,(t.interpolate||K).source,(t.evaluate||K).source].join("|")+"|$","g"),u=0,i="__p+='";n.replace(e,function(t,r,e,o,a){return i+=n.slice(u,a).replace(D,L),u=a+t.length,r?i+="'+\n((__t=("+r+"))==null?'':_.escape(__t))+\n'":e?i+="'+\n((__t=("+e+"))==null?'':__t)+\n'":o&&(i+="';\n"+o+"\n__p+='"),t}),i+="';\n",t.variable||(i="with(obj||{}){\n"+i+"}\n"),i="var __t,__p='',__j=Array.prototype.join,"+"print=function(){__p+=__j.call(arguments,'');};\n"+i+"return __p;\n";try{var o=new Function(t.variable||"obj","_",i)}catch(a){throw a.source=i,a}var c=function(n){return o.call(this,n,m)},f=t.variable||"obj";return c.source="function("+f+"){\n"+i+"}",c},m.chain=function(n){var t=m(n);return t._chain=!0,t};var P=function(n,t){return n._chain?m(t).chain():t};m.mixin=function(n){m.each(m.functions(n),function(t){var r=m[t]=n[t];m.prototype[t]=function(){var n=[this._wrapped];return f.apply(n,arguments),P(this,r.apply(m,n))}})},m.mixin(m),m.each(["pop","push","reverse","shift","sort","splice","unshift"],function(n){var t=o[n];m.prototype[n]=function(){var r=this._wrapped;return t.apply(r,arguments),"shift"!==n&&"splice"!==n||0!==r.length||delete r[0],P(this,r)}}),m.each(["concat","join","slice"],function(n){var t=o[n];m.prototype[n]=function(){return P(this,t.apply(this._wrapped,arguments))}}),m.prototype.value=function(){return this._wrapped},m.prototype.valueOf=m.prototype.toJSON=m.prototype.value,m.prototype.toString=function(){return""+this._wrapped},"function"==typeof define&&define.amd&&define("underscore",[],function(){return m})}).call(this);

},{}]},{},[14])(14)
});
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
